// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// model User {
//   id Int @id @default(autoincrement())
//   // Int? make property optional
//   // Int[] to turn into a list

//   // can optionally apply 1 or more attributes to a field...
//   // @id is saying this is an id field that uniquely identifies each user
//   // can give it a default value using the default attribute...
//   // it should be called and given a default value like 1234 (scalar) or...
//   // the autoincrement fxn can be used- db will generate new ids for us
//   email        String   @unique
//   // @unique is another attr used to make sure we're not storing users with more than one of same email
//   name         String
//   followers    Int      @default(0)
//   isActive     Boolean  @default(true)
//   registeredAt DateTime @default(now())
// }

// // $ npx prisma- to reformat table and make more readable

// model Product {
//   id    Int    @id @default(autoincrement())
//   name  String
//   price Float
// }

// removed User and Product models bc sometimes changing models and migrating db can cause issues and we don't need them anymore

// *pasting models from next auth prisma adapter docs*
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
 
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}